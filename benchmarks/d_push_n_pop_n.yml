---
prelude: |
  system("#{RbConfig.ruby} bin/rake compile", err: :out, exception: true)
  require "d_heap/benchmarks"
  include DHeap::Benchmarks

  # this is >4x faster than calling Kernel#rand (see random_vals.yml)
  random_idx  = -1
  random_len  = 1_000_000
  random_vals = Array.new(random_len) { rand(0..10_000) }

  N = ENV.fetch("BENCH_N", 100_000).to_i
  N2 = N * 2

  i = j = 0

teardown: |
  puts "teardown: size: %p, N: %p, i: %p, j: %p, __bmdv_i: %p" % [
    q.size, N, i, j, __bmdv_i
  ]

benchmark:
  - &benchmark
    name: "d=2"
    prelude: "q = DHeap.new(d: 2)"
    loop_count: 18_000_000  # MAX: 3_000_000 * 2
    script: |
      if i < N
        q.clear if __bmdv_i == 0
        random_idx += 1
        q << random_vals.fetch(random_idx % random_len)
        i += 1

      elsif j < N
        q.pop
        j += 1

      elsif q.empty?
        j = 0
        random_idx += 1
        q << random_vals.fetch(random_idx % random_len)
        i = 1

      else
        raise "q not empty! size: %p, N: %p, i: %p, j: %p, __bmdv_i: %p" % [
          q.size, N, i, j, __bmdv_i
        ]
      end
  - <<: *benchmark
    name: "d=3"
    prelude: "q = DHeap.new(d: 3)"
  - <<: *benchmark
    name: "d=4"
    prelude: "q = DHeap.new(d: 4)"
  - <<: *benchmark
    name: "d=5"
    prelude: "q = DHeap.new(d: 5)"
  - <<: *benchmark
    name: "d=6"
    prelude: "q = DHeap.new(d: 6)"
  - <<: *benchmark
    name: "d=7"
    prelude: "q = DHeap.new(d: 7)"
  - <<: *benchmark
    name: "d=8"
    prelude: "q = DHeap.new(d: 8)"
  - <<: *benchmark
    name: "d=10"
    prelude: "q = DHeap.new(d: 10)"
  - <<: *benchmark
    name: "d=12"
    prelude: "q = DHeap.new(d: 12)"
  - <<: *benchmark
    name: "d=14"
    prelude: "q = DHeap.new(d: 14)"
  - <<: *benchmark
    name: "d=16"
    prelude: "q = DHeap.new(d: 16)"
  - <<: *benchmark
    name: "d=24"
    prelude: "q = DHeap.new(d: 24)"
  - <<: *benchmark
    name: "d=32"
    prelude: "q = DHeap.new(d: 32)"
