---
prelude: |
  system("#{RbConfig.ruby} bin/rake compile", err: :out, exception: true)
  require "d_heap/benchmarks"
  include DHeap::Benchmarks

  # this is >4x faster than calling Kernel#rand (see random_vals.yml)
  random_idx  = -1
  random_len  = 1_000_000
  random_vals = Array.new(random_len) { rand(0..100_000_000) }

  D = ENV.fetch("BENCH_D", 10).to_i
  N = ENV.fetch("BENCH_N", 10_000).to_i

benchmark:
  - script: &script |
      random_idx += 1
      q << random_vals.fetch(random_idx % random_len)
      q.pop
    name:    "push + pop (findmin)"
    prelude: |
      q = FindMin.new(N) {
        random_idx += 1
        random_vals.fetch(random_idx % random_len)
      }

  - script: *script
    name:    "push + pop (bsearch)"
    prelude: |
      q = BSearch.new(N) {
        random_idx += 1
        random_vals.fetch(random_idx % random_len)
      }

  - script: *script
    name:    "push + pop (rb_heap)"
    prelude: |
      q = RbHeap.new(N) {
        random_idx += 1
        random_vals.fetch(random_idx % random_len)
      }

  - script: *script
    name: "push + pop (c++ stl)"
    prelude: |
      q = CppSTL.new
      N.times do
        random_idx += 1
        q << random_vals.fetch(random_idx % random_len)
      end

  - script: *script
    name: "push + pop (c_dheap)"
    prelude: |
      q = DHeap.new(d: D)
      N.times do
        random_idx += 1
        q << random_vals.fetch(random_idx % random_len)
      end
