---
prelude: |
  system("#{RbConfig.ruby} bin/rake compile", err: :out, exception: true)
  require "d_heap"

  # this is >4x faster than calling Kernel#rand (see random_vals.yml)
  random_idx  = -1
  random_len  = 1_000_000
  random_vals = Array.new(random_len) { rand(0..100_000_000) }

  D = ENV.fetch("BENCH_D", 10).to_i
  q = DHeap.new(d: D)
  i = j = 0

teardown: |
  puts "teardown: size: %p, N: %p, i: %p, j: %p, __bmdv_i: %p" % [
    q.size, N, i, j, __bmdv_i
  ]

benchmark:

  - &benchmark
    name: "N=10"
    prelude: "N = 10; N2 = N * 2"
    loop_count: 18_000_000  # MAX: 3_000_000 * 2
    script: |
      if i < N
        q.clear if __bmdv_i == 0
        random_idx += 1
        q << random_vals.fetch(random_idx % random_len)
        i += 1

      elsif j < N
        q.pop
        j += 1

      elsif q.empty?
        j = 0
        random_idx += 1
        q << random_vals.fetch(random_idx % random_len)
        i = 1

      else
        raise "q not empty! size: %p, N: %p, i: %p, j: %p, __bmdv_i: %p" % [
          q.size, N, i, j, __bmdv_i
        ]
      end
  - <<: *benchmark
    name: "N=30"
    prelude: "N = 30; N2 = N * 2"

  - <<: *benchmark
    name: "N=100"
    prelude: "N = 100; N2 = N * 2"
  - <<: *benchmark
    name: "N=300"
    prelude: "N = 300; N2 = N * 2"

  - <<: *benchmark
    name: "N=1,000"
    prelude: "N = 1_000; N2 = N * 2"
  - <<: *benchmark
    name: "N=3,000"
    prelude: "N = 3_000; N2 = N * 2"

  - <<: *benchmark
    name: "N=10,000"
    prelude: "N = 10_000; N2 = N * 2"
  - <<: *benchmark
    name: "N=30,000"
    prelude: "N = 30_000; N2 = N * 2"

  - <<: *benchmark
    name: "N=100,000"
    prelude: "N = 100_000; N2 = N * 2"
  - <<: *benchmark
    name: "N=300,000"
    prelude: "N = 300_000; N2 = N * 2"

  - <<: *benchmark
    name: "N=1,000,000"
    prelude: "N = 1_000_000; N2 = N * 2"
  - <<: *benchmark
    name: "N=3,000,000"
    prelude: "N = 3_000_000; N2 = N * 2"
