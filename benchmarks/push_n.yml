---
prelude: |
  system("#{RbConfig.ruby} bin/rake compile", err: :out, exception: true)
  require "d_heap/benchmarks"
  include DHeap::Benchmarks

  # this is >4x faster than calling Kernel#rand (see random_vals.yml)
  random_idx  = -1
  random_len  = 1_000_000
  random_vals = Array.new(random_len) { rand(0..10_000) }

  N = ENV.fetch("BENCH_N", 100_000).to_i

benchmark:
  - script: &script |
      q.clear if __bmdv_i % N == 0
      random_idx += 1
      q << random_vals.fetch(random_idx % random_len)
    name:    "push N (findmin)"
    prelude: "q = FindMin.new"
    loop_count: 30_000_000
  - script: *script
    name:    "push N (bsearch)"
    prelude: "q = BSearch.new"
    loop_count:    600_000
  - script: *script
    name:    "push N (rb_heap)"
    prelude: "q = RbHeap.new"
    loop_count: 12_000_000
  - script: *script
    name:    "push N (c++ stl)"
    prelude: "q = CppSTL.new"
    loop_count: 18_000_000
  - script: *script
    name:    "push N (c_dheap)"
    prelude: "q = DHeap.new"
    loop_count: 30_000_000
