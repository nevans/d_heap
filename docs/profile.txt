Profiling run at 2021-01-01 16:09:25 -0500
ruby v2.7.2, DHeap v0.3.0

########################################################################
# Profile w/ N=10 (i=100000)
# (n.b. RubyProf & tracepoint can change relative performance.
#       A sampling profiler can provide more accurate relative metrics.
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 120.0M ~~~~~~
Filling    push and resort ---------------------------
Profiling  push and resort ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 0.406568
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 49.18      0.200     0.200     0.000     0.000   100000   Array#sort!
 17.48      0.407     0.071     0.000     0.335        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
 15.97      0.278     0.065     0.000     0.213   100000   DHeap::Benchmarks::PushAndResort#<< d_heap/lib/d_heap/benchmarks/implementations.rb:31
  7.79      0.045     0.032     0.000     0.014   100000   DHeap::Benchmarks::PushAndResort#pop d_heap/lib/d_heap/benchmarks/implementations.rb:38
  3.36      0.014     0.014     0.000     0.000   100000   Array#shift
  3.27      0.013     0.013     0.000     0.000   100000   Array#push
  2.94      0.012     0.012     0.000     0.000   100000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   bsearch + insert ---------------------------
Profiling bsearch + insert ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 0.271884
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 26.99      0.272     0.073     0.000     0.198        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
 25.21      0.138     0.069     0.000     0.070   100000   DHeap::Benchmarks::BinarySearchAndInsert#<< d_heap/lib/d_heap/benchmarks/implementations.rb:57
 20.05      0.055     0.055     0.000     0.000   100000   Array#bsearch_index
 12.96      0.048     0.035     0.000     0.013   100000   DHeap::Benchmarks::BinarySearchAndInsert#pop d_heap/lib/d_heap/benchmarks/implementations.rb:66
  9.16      0.025     0.025     0.000     0.000   200000   Array#pop
  5.62      0.015     0.015     0.000     0.000   100000   Array#insert

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   ruby binary heap ---------------------------
Profiling ruby binary heap ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 0.639402
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 40.93      0.301     0.262     0.000     0.039   100000   DHeap::Benchmarks::NaiveBinaryHeap#pop d_heap/lib/d_heap/benchmarks/implementations.rb:92
 37.76      0.254     0.241     0.000     0.013   100000   DHeap::Benchmarks::NaiveBinaryHeap#<< d_heap/lib/d_heap/benchmarks/implementations.rb:76
 11.25      0.639     0.072     0.000     0.567        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
  4.01      0.026     0.026     0.000     0.000   200000   Array#pop
  2.09      0.013     0.013     0.000     0.000   100000   Array#first
  2.01      0.013     0.013     0.000     0.000   100000   Array#push
  1.95      0.012     0.012     0.000     0.000   100000   Array#last

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   quaternary DHeap ---------------------------
Profiling quaternary DHeap ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 0.135606
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 54.01      0.136     0.073     0.000     0.062        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
 20.47      0.028     0.028     0.000     0.000   100000   DHeap#<<
 15.34      0.021     0.021     0.000     0.000   100000   DHeap#pop
 10.17      0.014     0.014     0.000     0.000   100000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

########################################################################
# Profile w/ N=1000 (i=100000)
# (n.b. RubyProf & tracepoint can change relative performance.
#       A sampling profiler can provide more accurate relative metrics.
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling    push and resort ---------------------------
Profiling  push and resort ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.001M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 3.113861
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 92.13      2.869     2.869     0.000     0.000   100000   Array#sort!
  2.58      3.114     0.080     0.000     3.034        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
  2.21      2.951     0.069     0.000     2.882   100000   DHeap::Benchmarks::PushAndResort#<< d_heap/lib/d_heap/benchmarks/implementations.rb:31
  1.15      0.069     0.036     0.000     0.033   100000   DHeap::Benchmarks::PushAndResort#pop d_heap/lib/d_heap/benchmarks/implementations.rb:38
  1.07      0.033     0.033     0.000     0.000   100000   Array#shift

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   bsearch + insert ---------------------------
Profiling bsearch + insert ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.001M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 0.325665
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 36.81      0.120     0.120     0.000     0.000   100000   Array#bsearch_index
 21.07      0.326     0.069     0.000     0.257        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
 19.89      0.200     0.065     0.000     0.135   100000   DHeap::Benchmarks::BinarySearchAndInsert#<< d_heap/lib/d_heap/benchmarks/implementations.rb:57
 10.38      0.046     0.034     0.000     0.012   100000   DHeap::Benchmarks::BinarySearchAndInsert#pop d_heap/lib/d_heap/benchmarks/implementations.rb:66
  7.28      0.024     0.024     0.000     0.000   200000   Array#pop
  4.56      0.015     0.015     0.000     0.000   100000   Array#insert

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   ruby binary heap ---------------------------
Profiling ruby binary heap ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.001M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 1.369518
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 52.40      0.754     0.718     0.000     0.036   100000   DHeap::Benchmarks::NaiveBinaryHeap#pop d_heap/lib/d_heap/benchmarks/implementations.rb:92
 38.15      0.535     0.522     0.000     0.012   100000   DHeap::Benchmarks::NaiveBinaryHeap#<< d_heap/lib/d_heap/benchmarks/implementations.rb:76
  5.04      1.370     0.069     0.000     1.301        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
  1.77      0.024     0.024     0.000     0.000   200000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   quaternary DHeap ---------------------------
Profiling quaternary DHeap ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.001M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 0.140288
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 44.18      0.140     0.062     0.000     0.078        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
 25.47      0.036     0.036     0.000     0.000   100000   DHeap#<<
 22.39      0.031     0.031     0.000     0.000   100000   DHeap#pop
  7.96      0.011     0.011     0.000     0.000   100000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

########################################################################
# Profile w/ N=100000 (i=100000)
# (n.b. RubyProf & tracepoint can change relative performance.
#       A sampling profiler can provide more accurate relative metrics.
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   bsearch + insert ---------------------------
Profiling bsearch + insert ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 1.033389
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 59.52      0.615     0.615     0.000     0.000   100000   Array#insert
 20.38      0.211     0.211     0.000     0.000   100000   Array#bsearch_index
  7.36      1.033     0.076     0.000     0.957        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
  6.70      0.895     0.069     0.000     0.826   100000   DHeap::Benchmarks::BinarySearchAndInsert#<< d_heap/lib/d_heap/benchmarks/implementations.rb:57
  3.46      0.049     0.036     0.000     0.014   100000   DHeap::Benchmarks::BinarySearchAndInsert#pop d_heap/lib/d_heap/benchmarks/implementations.rb:66
  2.58      0.027     0.027     0.000     0.000   200000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   ruby binary heap ---------------------------
Profiling ruby binary heap ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 1.766487
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 71.25      1.294     1.259     0.000     0.036   100000   DHeap::Benchmarks::NaiveBinaryHeap#pop d_heap/lib/d_heap/benchmarks/implementations.rb:92
 21.28      0.388     0.376     0.000     0.012   100000   DHeap::Benchmarks::NaiveBinaryHeap#<< d_heap/lib/d_heap/benchmarks/implementations.rb:76
  4.08      1.766     0.072     0.000     1.694        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
  1.36      0.024     0.024     0.000     0.000   200000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Filling   quaternary DHeap ---------------------------
Profiling quaternary DHeap ---------------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.1M ~~~~~~
Measure Mode: wall_time
Thread ID: 1280
Fiber ID: 1260
Total: 0.165078
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 39.51      0.165     0.065     0.000     0.100        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/lib/d_heap/benchmarks.rb:77
 36.19      0.060     0.060     0.000     0.000   100000   DHeap#pop
 17.15      0.028     0.028     0.000     0.000   100000   DHeap#<<
  7.14      0.012     0.012     0.000     0.000   100000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

