Profiling run at 2021-01-04 11:14:01 -0500
ruby v2.7.2, DHeap v0.3.0

########################################################################
# Profile w/ N=10 (i=1000000)
# (n.b. RubyProf & tracepoint can change relative performance.
#       A sampling profiler can provide more accurate relative metrics.
########################################################################

~~~~~~ filling @dheap_bm_random_vals with 10.0M ~~~~~~
Filling    push and resort ---------------------------
Profiling  push and resort ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 2.709973
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 30.27      2.710     0.820     0.000     1.890        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
 24.69      1.305     0.669     0.000     0.635  1000000   DHeap::Benchmarks::PushAndResort#<< d_heap/benchmarks/implementations.rb:35
 18.16      0.492     0.492     0.000     0.000  1000000   Array#sort!
 11.76      0.461     0.319     0.000     0.143  1000000   DHeap::Benchmarks::PushAndResort#pop d_heap/benchmarks/implementations.rb:42
  5.28      0.143     0.143     0.000     0.000  1000000   Array#push
  5.26      0.143     0.143     0.000     0.000  1000000   Array#shift
  4.57      0.124     0.124     0.000     0.000  1000000   Array#fetch

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   bsearch + insert ---------------------------
Profiling bsearch + insert ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 2.661524
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 29.50      2.662     0.785     0.000     1.876        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
 24.09      1.309     0.641     0.000     0.668  1000000   DHeap::Benchmarks::BinarySearchAndInsert#<< d_heap/benchmarks/implementations.rb:61
 19.78      0.526     0.526     0.000     0.000  1000000   Array#bsearch_index
 12.13      0.441     0.323     0.000     0.118  1000000   DHeap::Benchmarks::BinarySearchAndInsert#pop d_heap/benchmarks/implementations.rb:70
  5.33      0.142     0.142     0.000     0.000  1000000   Array#insert
  4.74      0.126     0.126     0.000     0.000  1000000   Array#fetch
  4.43      0.118     0.118     0.000     0.000  1000000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   ruby binary heap ---------------------------
Profiling ruby binary heap ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 5.678843
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 42.98      2.570     2.441     0.000     0.129  1000000   DHeap::Benchmarks::NaiveBinaryHeap#<< d_heap/benchmarks/implementations.rb:80
 31.41      2.154     1.784     0.000     0.370  1000000   DHeap::Benchmarks::NaiveBinaryHeap#pop d_heap/benchmarks/implementations.rb:96
 14.44      5.679     0.820     0.000     4.859        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
  2.37      0.135     0.135     0.000     0.000  1000000   Array#fetch
  2.28      0.129     0.129     0.000     0.000  1000000   Array#pop
  2.27      0.129     0.129     0.000     0.000  1000000   Array#push
  2.19      0.125     0.125     0.000     0.000  1000000   Array#first
  2.05      0.117     0.117     0.000     0.000  1000000   Array#last

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   quaternary DHeap ---------------------------
Profiling quaternary DHeap ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 1.274236
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 57.87      1.274     0.737     0.000     0.537        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
 19.22      0.245     0.245     0.000     0.000  1000000   DHeap#<<
 13.21      0.168     0.168     0.000     0.000  1000000   DHeap#pop
  9.70      0.124     0.124     0.000     0.000  1000000   Array#fetch

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

########################################################################
# Profile w/ N=1000 (i=1000000)
# (n.b. RubyProf & tracepoint can change relative performance.
#       A sampling profiler can provide more accurate relative metrics.
########################################################################

Filling    push and resort ---------------------------
Profiling  push and resort ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 31.376364
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 91.86     28.823    28.823     0.000     0.000  1000000   Array#sort!
  2.83     31.376     0.888     0.000    30.489        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
  2.28     29.683     0.714     0.000    28.969  1000000   DHeap::Benchmarks::PushAndResort#<< d_heap/benchmarks/implementations.rb:35
  1.10      0.674     0.346     0.000     0.328  1000000   DHeap::Benchmarks::PushAndResort#pop d_heap/benchmarks/implementations.rb:42
  1.05      0.328     0.328     0.000     0.000  1000000   Array#shift

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   bsearch + insert ---------------------------
Profiling bsearch + insert ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 3.485141
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 36.29      1.265     1.265     0.000     0.000  1000000   Array#bsearch_index
 23.21      3.485     0.809     0.000     2.676        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
 19.26      2.086     0.671     0.000     1.415  1000000   DHeap::Benchmarks::BinarySearchAndInsert#<< d_heap/benchmarks/implementations.rb:61
  9.59      0.461     0.334     0.000     0.126  1000000   DHeap::Benchmarks::BinarySearchAndInsert#pop d_heap/benchmarks/implementations.rb:70
  4.31      0.150     0.150     0.000     0.000  1000000   Array#insert
  3.71      0.129     0.129     0.000     0.000  1000000   Array#fetch
  3.63      0.126     0.126     0.000     0.000  1000000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   ruby binary heap ---------------------------
Profiling ruby binary heap ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 10.263840
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 52.25      5.490     5.363     0.000     0.127  1000000   DHeap::Benchmarks::NaiveBinaryHeap#<< d_heap/benchmarks/implementations.rb:80
 33.44      3.835     3.432     0.000     0.403  1000000   DHeap::Benchmarks::NaiveBinaryHeap#pop d_heap/benchmarks/implementations.rb:96
  7.85     10.264     0.805     0.000     9.459        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
  1.39      0.142     0.142     0.000     0.000  1000000   Array#last
  1.31      0.135     0.135     0.000     0.000  1000000   Array#pop
  1.30      0.134     0.134     0.000     0.000  1000000   Array#fetch
  1.24      0.127     0.127     0.000     0.000  1000000   Array#push
  1.23      0.126     0.126     0.000     0.000  1000000   Array#first

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   quaternary DHeap ---------------------------
Profiling quaternary DHeap ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 1.398884
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 50.76      1.399     0.710     0.000     0.689        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
 26.29      0.368     0.368     0.000     0.000  1000000   DHeap#<<
 14.27      0.200     0.200     0.000     0.000  1000000   DHeap#pop
  8.68      0.121     0.121     0.000     0.000  1000000   Array#fetch

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

########################################################################
# Profile w/ N=100000 (i=1000000)
# (n.b. RubyProf & tracepoint can change relative performance.
#       A sampling profiler can provide more accurate relative metrics.
########################################################################

Filling   bsearch + insert ---------------------------
Profiling bsearch + insert ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 6.385769
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 34.79      2.222     2.222     0.000     0.000  1000000   Array#insert
 32.59      2.081     2.081     0.000     0.000  1000000   Array#bsearch_index
 12.84      6.386     0.820     0.000     5.566        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
 10.38      4.966     0.663     0.000     4.303  1000000   DHeap::Benchmarks::BinarySearchAndInsert#<< d_heap/benchmarks/implementations.rb:61
  5.38      0.468     0.343     0.000     0.125  1000000   DHeap::Benchmarks::BinarySearchAndInsert#pop d_heap/benchmarks/implementations.rb:70
  2.06      0.132     0.132     0.000     0.000  1000000   Array#fetch
  1.95      0.125     0.125     0.000     0.000  1000000   Array#pop

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   ruby binary heap ---------------------------
Profiling ruby binary heap ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 16.731633
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 48.52      8.487     8.118     0.000     0.369  1000000   DHeap::Benchmarks::NaiveBinaryHeap#pop d_heap/benchmarks/implementations.rb:96
 42.94      7.310     7.184     0.000     0.126  1000000   DHeap::Benchmarks::NaiveBinaryHeap#<< d_heap/benchmarks/implementations.rb:80
  4.80     16.732     0.803     0.000    15.929        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

Filling   quaternary DHeap ---------------------------
Profiling quaternary DHeap ---------------------------
Measure Mode: wall_time
Thread ID: 1340
Fiber ID: 1320
Total: 1.685324
Sort by: self_time

 %self      total      self      wait     child     calls  name                           location
 43.09      1.685     0.726     0.000     0.959        1   DHeap::Benchmarks::Scenarios#repeated_push_pop d_heap/benchmarks.rb:77
 26.05      0.439     0.439     0.000     0.000  1000000   DHeap#<<
 23.57      0.397     0.397     0.000     0.000  1000000   DHeap#pop
  7.29      0.123     0.123     0.000     0.000  1000000   Array#fetch

* recursively called methods

Columns are:

  %self     - The percentage of time spent in this method, derived from self_time/total_time.
  total     - The time spent in this method and its children.
  self      - The time spent in this method.
  wait      - The amount of time this method waited for other threads.
  child     - The time spent in this method's children.
  calls     - The number of times this method was called.
  name      - The name of the method.
  location  - The location of the method.

The interpretation of method names is:

  * MyObject#test - An instance method "test" of the class "MyObject"
  * <Object:MyObject>#test - The <> characters indicate a method on a singleton class.

