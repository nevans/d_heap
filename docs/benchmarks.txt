Benchmarking run at 2021-01-05 22:36:11 -0500
ruby v2.7.2, DHeap v0.3.0

Testing all implementations. . .
~~~~~~ filling @dheap_bm_random_vals with 10.0M ~~~~~~
Tests OK (count=1000, size=1000)

########################################################################
# Benchmarks with N=3 (t=10sec/benchmark)
########################################################################

~~~~~~ filling @dheap_bm_random_vals with 4.0M ~~~~~~
== push N (N=3) =================================
Calculating -------------------------------------
     push and resort      1.255M (±10.3%) i/s -      9.986M in   8.385356s
    bsearch + insert      1.158M (± 7.6%) i/s -      9.654M in   8.472831s
    ruby binary heap      1.291M (±10.2%) i/s -     10.466M in   8.274911s
    quaternary DHeap      1.617M (± 9.2%) i/s -     12.619M

Comparison:
    quaternary DHeap:  1617144.0 i/s
    ruby binary heap:  1290788.8 i/s - 1.25x  (± 0.00) slower
     push and resort:  1254587.2 i/s - 1.29x  (± 0.00) slower
    bsearch + insert:  1157835.1 i/s - 1.40x  (± 0.00) slower

== push N then pop N (N=3) =================================
Calculating -------------------------------------
     push and resort      1.055M (± 9.6%) i/s -      8.699M
    bsearch + insert      1.023M (± 8.1%) i/s -      8.672M in   8.611256s
    ruby binary heap    809.429k (± 8.7%) i/s -      6.941M
    quaternary DHeap      1.240M (± 8.2%) i/s -     10.171M

Comparison:
    quaternary DHeap:  1239554.5 i/s
     push and resort:  1054765.2 i/s - same-ish: difference falls within error
    bsearch + insert:  1023449.6 i/s - 1.21x  (± 0.00) slower
    ruby binary heap:   809428.6 i/s - 1.53x  (± 0.00) slower

Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=3) =================================
Calculating -------------------------------------
     push and resort    310.214  (± 4.5%) i/s -      3.093k in  10.000096s
    bsearch + insert    427.064  (± 6.1%) i/s -      4.242k in   9.999548s
    ruby binary heap    215.021  (± 4.7%) i/s -      2.144k in  10.002072s
    quaternary DHeap    591.926  (± 4.4%) i/s -      5.899k in   9.997895s

Comparison:
    quaternary DHeap:      591.9 i/s
    bsearch + insert:      427.1 i/s - 1.39x  (± 0.00) slower
     push and resort:      310.2 i/s - 1.91x  (± 0.00) slower
    ruby binary heap:      215.0 i/s - 2.75x  (± 0.00) slower

########################################################################
# Benchmarks with N=7 (t=10sec/benchmark)
########################################################################

== push N (N=7) =================================
Calculating -------------------------------------
     push and resort    478.065k (±11.1%) i/s -      4.257M in   9.289855s
    bsearch + insert    549.614k (± 8.1%) i/s -      4.970M in   9.174841s
    ruby binary heap    617.740k (±10.8%) i/s -      5.507M in   9.089557s
    quaternary DHeap    873.063k (± 9.4%) i/s -      7.477M in   8.728869s

Comparison:
    quaternary DHeap:   873063.2 i/s
    ruby binary heap:   617739.7 i/s - 1.41x  (± 0.00) slower
    bsearch + insert:   549614.0 i/s - 1.59x  (± 0.00) slower
     push and resort:   478065.2 i/s - 1.83x  (± 0.00) slower

== push N then pop N (N=7) =================================
Calculating -------------------------------------
     push and resort    410.724k (±10.2%) i/s -      3.714M in   9.365918s
    bsearch + insert    469.343k (± 8.3%) i/s -      4.281M in   9.284109s
    ruby binary heap    289.614k (± 8.3%) i/s -      2.721M in   9.546213s
    quaternary DHeap    595.232k (± 7.9%) i/s -      5.305M in   9.066868s

Comparison:
    quaternary DHeap:   595232.2 i/s
    bsearch + insert:   469342.6 i/s - 1.27x  (± 0.00) slower
     push and resort:   410724.5 i/s - 1.45x  (± 0.00) slower
    ruby binary heap:   289614.0 i/s - 2.06x  (± 0.00) slower

Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=7) =================================
Calculating -------------------------------------
     push and resort    261.336  (± 5.4%) i/s -      2.602k in  10.000939s
    bsearch + insert    379.339  (± 4.2%) i/s -      3.781k in   9.998602s
    ruby binary heap    183.753  (± 4.4%) i/s -      1.832k in  10.003362s
    quaternary DHeap    514.630  (± 4.3%) i/s -      5.130k in   9.999409s

Comparison:
    quaternary DHeap:      514.6 i/s
    bsearch + insert:      379.3 i/s - 1.36x  (± 0.00) slower
     push and resort:      261.3 i/s - 1.97x  (± 0.00) slower
    ruby binary heap:      183.8 i/s - 2.80x  (± 0.00) slower

########################################################################
# Benchmarks with N=15 (t=10sec/benchmark)
########################################################################

== push N (N=15) =================================
Calculating -------------------------------------
     push and resort    185.178k (±10.3%) i/s -      1.747M in   9.702608s
    bsearch + insert    250.747k (± 7.9%) i/s -      2.371M in   9.586547s
    ruby binary heap    294.822k (±10.8%) i/s -      2.751M in   9.541493s
    quaternary DHeap    478.904k (± 8.9%) i/s -      4.341M in   9.227877s

Comparison:
    quaternary DHeap:   478904.0 i/s
    ruby binary heap:   294822.2 i/s - 1.62x  (± 0.00) slower
    bsearch + insert:   250747.0 i/s - 1.91x  (± 0.00) slower
     push and resort:   185178.1 i/s - 2.59x  (± 0.00) slower

== push N then pop N (N=15) =================================
Calculating -------------------------------------
     push and resort    162.347k (± 9.8%) i/s -      1.538M in   9.734602s
    bsearch + insert    216.105k (± 6.8%) i/s -      2.064M in   9.660806s
    ruby binary heap    113.495k (± 7.8%) i/s -      1.102M in   9.814616s
    quaternary DHeap    283.120k (± 8.5%) i/s -      2.644M

Comparison:
    quaternary DHeap:   283120.3 i/s
    bsearch + insert:   216104.9 i/s - 1.31x  (± 0.00) slower
     push and resort:   162347.0 i/s - 1.74x  (± 0.00) slower
    ruby binary heap:   113494.9 i/s - 2.49x  (± 0.00) slower

Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=15) =================================
Calculating -------------------------------------
     push and resort    175.871  (± 4.5%) i/s -      1.754k in  10.003840s
    bsearch + insert    338.651  (± 5.0%) i/s -      3.372k in   9.998847s
    ruby binary heap    154.924  (± 5.2%) i/s -      1.544k in  10.004687s
    quaternary DHeap    516.078  (± 4.3%) i/s -      5.143k in   9.999239s

Comparison:
    quaternary DHeap:      516.1 i/s
    bsearch + insert:      338.7 i/s - 1.52x  (± 0.00) slower
     push and resort:      175.9 i/s - 2.93x  (± 0.00) slower
    ruby binary heap:      154.9 i/s - 3.33x  (± 0.00) slower

########################################################################
# Benchmarks with N=31 (t=10sec/benchmark)
########################################################################

== push N (N=31) =================================
Calculating -------------------------------------
     push and resort     64.440k (± 8.9%) i/s -    625.343k in   9.890167s
    bsearch + insert    112.225k (± 6.7%) i/s -      1.090M
    ruby binary heap    139.225k (±10.5%) i/s -      1.335M
    quaternary DHeap    246.248k (± 9.0%) i/s -      2.316M in   9.572320s

Comparison:
    quaternary DHeap:   246247.5 i/s
    ruby binary heap:   139225.2 i/s - 1.77x  (± 0.00) slower
    bsearch + insert:   112224.8 i/s - 2.19x  (± 0.00) slower
     push and resort:    64440.2 i/s - 3.82x  (± 0.00) slower

== push N then pop N (N=31) =================================
Calculating -------------------------------------
     push and resort     57.055k (±11.6%) i/s -    545.508k in   9.893610s
    bsearch + insert     93.296k (± 8.5%) i/s -    890.567k in   9.836420s
    ruby binary heap     44.345k (± 8.7%) i/s -    431.579k in   9.898826s
    quaternary DHeap    125.244k (± 7.9%) i/s -      1.187M in   9.749409s

Comparison:
    quaternary DHeap:   125244.3 i/s
    bsearch + insert:    93296.2 i/s - 1.34x  (± 0.00) slower
     push and resort:    57054.7 i/s - 2.20x  (± 0.00) slower
    ruby binary heap:    44345.1 i/s - 2.82x  (± 0.00) slower

Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=31) =================================
Calculating -------------------------------------
     push and resort    114.182  (± 4.4%) i/s -      1.139k in  10.001351s
    bsearch + insert    306.229  (± 4.9%) i/s -      3.051k in   9.999296s
    ruby binary heap    138.365  (± 5.8%) i/s -      1.377k in  10.001052s
    quaternary DHeap    460.355  (± 4.8%) i/s -      4.586k in   9.999600s

Comparison:
    quaternary DHeap:      460.4 i/s
    bsearch + insert:      306.2 i/s - 1.50x  (± 0.00) slower
    ruby binary heap:      138.4 i/s - 3.33x  (± 0.00) slower
     push and resort:      114.2 i/s - 4.03x  (± 0.00) slower

########################################################################
# Benchmarks with N=100 (t=10sec/benchmark)
########################################################################

== push N (N=100) =================================
Calculating -------------------------------------
     push and resort      8.344k (± 7.3%) i/s -     82.496k in   9.982204s
    bsearch + insert     28.515k (± 7.1%) i/s -    280.872k in   9.949424s
    ruby binary heap     40.760k (± 8.7%) i/s -    399.107k in   9.930830s
    quaternary DHeap     78.618k (± 8.6%) i/s -    763.964k in   9.855780s

Comparison:
    quaternary DHeap:    78617.9 i/s
    ruby binary heap:    40760.2 i/s - 1.93x  (± 0.00) slower
    bsearch + insert:    28514.7 i/s - 2.76x  (± 0.00) slower
     push and resort:     8343.8 i/s - 9.42x  (± 0.00) slower

== push N then pop N (N=100) =================================
Calculating -------------------------------------
     push and resort      8.029k (± 8.1%) i/s -     79.208k in   9.981823s
    bsearch + insert     24.920k (± 7.3%) i/s -    245.535k in   9.955648s
    ruby binary heap     10.869k (± 6.7%) i/s -    107.557k in   9.978001s
    quaternary DHeap     35.460k (± 6.9%) i/s -    348.347k in   9.935493s

Comparison:
    quaternary DHeap:    35459.9 i/s
    bsearch + insert:    24920.5 i/s - 1.42x  (± 0.00) slower
    ruby binary heap:    10868.9 i/s - 3.26x  (± 0.00) slower
     push and resort:     8028.6 i/s - 4.42x  (± 0.00) slower

Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=100) =================================
Calculating -------------------------------------
     push and resort     44.364  (± 2.3%) i/s -    444.000  in  10.019016s
    bsearch + insert    277.462  (± 5.8%) i/s -      2.761k in  10.002372s
    ruby binary heap    125.096  (± 7.2%) i/s -      1.242k in  10.004472s
    quaternary DHeap    414.230  (± 5.6%) i/s -      4.121k in  10.000119s

Comparison:
    quaternary DHeap:      414.2 i/s
    bsearch + insert:      277.5 i/s - 1.49x  (± 0.00) slower
    ruby binary heap:      125.1 i/s - 3.31x  (± 0.00) slower
     push and resort:       44.4 i/s - 9.34x  (± 0.00) slower

########################################################################
# Benchmarks with N=1000 (t=10sec/benchmark)
########################################################################

== push N (N=1000) =================================
Calculating -------------------------------------
     push and resort     82.833  (± 2.4%) i/s -    828.000  in  10.005113s
    bsearch + insert      2.017k (± 5.0%) i/s -     20.087k in   9.995250s
    ruby binary heap      3.903k (± 6.2%) i/s -     38.769k in   9.992012s
    quaternary DHeap      8.014k (± 7.2%) i/s -     79.296k in   9.982809s

Comparison:
    quaternary DHeap:     8014.3 i/s
    ruby binary heap:     3902.8 i/s - 2.05x  (± 0.00) slower
    bsearch + insert:     2016.7 i/s - 3.97x  (± 0.00) slower
     push and resort:       82.8 i/s - 96.75x  (± 0.00) slower

== push N then pop N (N=1000) =================================
Calculating -------------------------------------
     push and resort     82.028  (± 4.9%) i/s -    818.000  in  10.002961s
    bsearch + insert      1.842k (± 6.2%) i/s -     18.304k in   9.995121s
    ruby binary heap    755.344  (± 4.2%) i/s -      7.534k in   9.998227s
    quaternary DHeap      2.858k (± 5.7%) i/s -     28.423k in   9.991636s

Comparison:
    quaternary DHeap:     2857.6 i/s
    bsearch + insert:     1841.8 i/s - 1.55x  (± 0.00) slower
    ruby binary heap:      755.3 i/s - 3.78x  (± 0.00) slower
     push and resort:       82.0 i/s - 34.84x  (± 0.00) slower

Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=1000) =================================
Calculating -------------------------------------
     push and resort      3.518  (± 0.0%) i/s -     36.000  in  10.235007s
    bsearch + insert    211.465  (± 4.3%) i/s -      2.109k in   9.999092s
    ruby binary heap     95.340  (±11.5%) i/s -    934.000  in  10.003264s
    quaternary DHeap    375.819  (± 4.8%) i/s -      3.746k in   9.998735s

Comparison:
    quaternary DHeap:      375.8 i/s
    bsearch + insert:      211.5 i/s - 1.78x  (± 0.00) slower
    ruby binary heap:       95.3 i/s - 3.94x  (± 0.00) slower
     push and resort:        3.5 i/s - 106.82x  (± 0.00) slower

########################################################################
# Benchmarks with N=10000 (t=10sec/benchmark)
########################################################################

== push N (N=10000) =================================
Calculating -------------------------------------
     push and resort      0.672  (± 0.0%) i/s -      7.000  in  10.424064s
    bsearch + insert    120.973  (± 3.3%) i/s -      1.208k in  10.000401s
    ruby binary heap    389.220  (± 4.1%) i/s -      3.882k in   9.998704s
    quaternary DHeap    807.050  (± 4.5%) i/s -      8.041k in   9.997096s

Comparison:
    quaternary DHeap:      807.1 i/s
    ruby binary heap:      389.2 i/s - 2.07x  (± 0.00) slower
    bsearch + insert:      121.0 i/s - 6.67x  (± 0.00) slower
     push and resort:        0.7 i/s - 1201.81x  (± 0.00) slower

== push N then pop N (N=10000) =================================
Calculating -------------------------------------
     push and resort      0.667  (± 0.0%) i/s -      7.000  in  10.500011s
    bsearch + insert    114.197  (± 3.5%) i/s -      1.141k in  10.005383s
    ruby binary heap     58.254  (± 1.7%) i/s -    583.000  in  10.013368s
    quaternary DHeap    236.172  (± 3.4%) i/s -      2.358k in  10.001903s

Comparison:
    quaternary DHeap:      236.2 i/s
    bsearch + insert:      114.2 i/s - 2.07x  (± 0.00) slower
    ruby binary heap:       58.3 i/s - 4.05x  (± 0.00) slower
     push and resort:        0.7 i/s - 354.25x  (± 0.00) slower

Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=10000) =================================
Calculating -------------------------------------
     push and resort      0.295  (± 0.0%) i/s -      3.000  in  10.165550s
    bsearch + insert    169.457  (± 4.7%) i/s -      1.689k in   9.998815s
    ruby binary heap     66.726  (±13.5%) i/s -    650.000  in  10.004652s
    quaternary DHeap    293.562  (± 9.5%) i/s -      2.897k in   9.998505s

Comparison:
    quaternary DHeap:      293.6 i/s
    bsearch + insert:      169.5 i/s - 1.73x  (± 0.00) slower
    ruby binary heap:       66.7 i/s - 4.40x  (± 0.00) slower
     push and resort:        0.3 i/s - 994.74x  (± 0.00) slower

########################################################################
# Benchmarks with N=100000 (t=10sec/benchmark)
########################################################################

== push N (N=100000) =================================
Calculating -------------------------------------
    bsearch + insert      2.199  (± 0.0%) i/s -     22.000  in  10.006556s
    ruby binary heap     37.929  (± 5.3%) i/s -    378.000  in  10.008772s
    quaternary DHeap     79.332  (± 3.8%) i/s -    792.000  in  10.002725s

Comparison:
    quaternary DHeap:       79.3 i/s
    ruby binary heap:       37.9 i/s - 2.09x  (± 0.00) slower
    bsearch + insert:        2.2 i/s - 36.08x  (± 0.00) slower

== push N then pop N (N=100000) =================================
Calculating -------------------------------------
    bsearch + insert      2.107  (± 0.0%) i/s -     22.000  in  10.446718s
    ruby binary heap      4.574  (± 0.0%) i/s -     46.000  in  10.081376s
    quaternary DHeap     19.509  (± 5.1%) i/s -    195.000  in  10.016774s

Comparison:
    quaternary DHeap:       19.5 i/s
    ruby binary heap:        4.6 i/s - 4.27x  (± 0.00) slower
    bsearch + insert:        2.1 i/s - 9.26x  (± 0.00) slower

Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
== Push/pop 10000 with pre-filled queue (size=N) (N=100000) =================================
Calculating -------------------------------------
    bsearch + insert    105.164  (±25.7%) i/s -    891.000  in   9.999131s
    ruby binary heap     46.231  (±13.0%) i/s -    456.000  in  10.003243s
    quaternary DHeap    246.973  (± 6.9%) i/s -      2.455k in  10.000362s

Comparison:
    quaternary DHeap:      247.0 i/s
    bsearch + insert:      105.2 i/s - 2.35x  (± 0.00) slower
    ruby binary heap:       46.2 i/s - 5.34x  (± 0.00) slower

