Benchmarking run at 2021-01-01 15:57:44 -0500
ruby v2.7.2, DHeap v0.3.0

Testing all implementations. . .
~~~~~~ refilling @dheap_bm_random_vals with 120.0M ~~~~~~
Tests OK (count=1000, size=1000)

########################################################################
# Benchmarks with N=3 (t=10sec/benchmark)
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 4.0M ~~~~~~
== push N (N=3) =================================
Calculating -------------------------------------
     push and resort      3.829k (±527.3%) i/s -      8.332k in  10.000236s
    bsearch + insert     41.646k (±167.7%) i/s -    144.256k in   9.966993s
    ruby binary heap      1.008M (±20.0%) i/s -      8.314M in   8.639974s
    quaternary DHeap      1.649M (±13.8%) i/s -     12.851M

Comparison:
    quaternary DHeap:  1648900.6 i/s
    ruby binary heap:  1007604.4 i/s - 1.64x  (± 0.00) slower
    bsearch + insert:    41645.6 i/s - 39.59x  (± 0.00) slower
     push and resort:     3829.1 i/s - 430.63x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 63.953M ~~~~~~
== push N then pop N (N=3) =================================
Calculating -------------------------------------
     push and resort      1.160M (±10.6%) i/s -      9.242M
    bsearch + insert      1.123M (± 7.1%) i/s -      9.435M in   8.508277s
    ruby binary heap    865.466k (± 9.6%) i/s -      7.436M
    quaternary DHeap      1.327M (± 6.8%) i/s -     10.925M in   8.309034s

Comparison:
    quaternary DHeap:  1327008.2 i/s
     push and resort:  1159743.7 i/s - same-ish: difference falls within error
    bsearch + insert:  1123316.4 i/s - 1.18x  (± 0.00) slower
    ruby binary heap:   865465.7 i/s - 1.53x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 111.114M ~~~~~~
Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
== Push/pop 10000 with pre-filled queue (size=N) (N=3) =================================
Calculating -------------------------------------
     push and resort      0.668  (± 0.0%) i/s -      7.000  in  10.481027s
    bsearch + insert    117.096  (± 4.3%) i/s -      1.169k in  10.007748s
    ruby binary heap     60.274  (± 3.3%) i/s -    602.000  in  10.006874s
    quaternary DHeap    230.402  (± 3.9%) i/s -      2.299k in  10.002340s

Comparison:
    quaternary DHeap:      230.4 i/s
    bsearch + insert:      117.1 i/s - 1.97x  (± 0.00) slower
    ruby binary heap:       60.3 i/s - 3.82x  (± 0.00) slower
     push and resort:        0.7 i/s - 344.88x  (± 0.00) slower

########################################################################
# Benchmarks with N=7 (t=10sec/benchmark)
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 40.77M ~~~~~~
== push N (N=7) =================================
Calculating -------------------------------------
     push and resort      1.630k (±518.4%) i/s -      3.548k in  10.000314s
    bsearch + insert     17.172k (±176.5%) i/s -     61.300k in   9.983732s
    ruby binary heap    529.434k (±17.2%) i/s -      4.704M in   9.230012s
    quaternary DHeap    934.832k (±13.6%) i/s -      7.862M in   8.749016s

Comparison:
    quaternary DHeap:   934832.5 i/s
    ruby binary heap:   529434.3 i/s - 1.77x  (± 0.00) slower
    bsearch + insert:    17171.8 i/s - 54.44x  (± 0.00) slower
     push and resort:     1629.8 i/s - 573.60x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 88.419M ~~~~~~
== push N then pop N (N=7) =================================
Calculating -------------------------------------
     push and resort    444.892k (±11.3%) i/s -      3.956M in   9.341505s
    bsearch + insert    515.891k (± 5.2%) i/s -      4.733M
    ruby binary heap    310.176k (± 7.9%) i/s -      2.922M in   9.529553s
    quaternary DHeap    600.001k (± 7.8%) i/s -      5.372M

Comparison:
    quaternary DHeap:   600001.5 i/s
    bsearch + insert:   515890.6 i/s - 1.16x  (± 0.00) slower
     push and resort:   444891.9 i/s - 1.35x  (± 0.00) slower
    ruby binary heap:   310176.0 i/s - 1.93x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 118.881M ~~~~~~
Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
== Push/pop 10000 with pre-filled queue (size=N) (N=7) =================================
Calculating -------------------------------------
     push and resort      0.669  (± 0.0%) i/s -      7.000  in  10.461770s
    bsearch + insert    116.349  (± 4.3%) i/s -      1.161k in  10.003754s
    ruby binary heap     59.401  (± 6.7%) i/s -    591.000  in  10.007661s
    quaternary DHeap    220.689  (± 4.5%) i/s -      2.200k in  10.000447s

Comparison:
    quaternary DHeap:      220.7 i/s
    bsearch + insert:      116.3 i/s - 1.90x  (± 0.00) slower
    ruby binary heap:       59.4 i/s - 3.72x  (± 0.00) slower
     push and resort:        0.7 i/s - 329.73x  (± 0.00) slower

########################################################################
# Benchmarks with N=15 (t=10sec/benchmark)
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 39.59M ~~~~~~
== push N (N=15) =================================
Calculating -------------------------------------
     push and resort    740.807  (±486.2%) i/s -      1.664k in  10.009901s
    bsearch + insert      6.939k (±154.6%) i/s -     28.879k in   9.993242s
    ruby binary heap    270.618k (±13.0%) i/s -      2.539M
    quaternary DHeap    511.979k (±12.6%) i/s -      4.571M in   9.246170s

Comparison:
    quaternary DHeap:   511979.2 i/s
    ruby binary heap:   270617.9 i/s - 1.89x  (± 0.00) slower
    bsearch + insert:     6938.6 i/s - 73.79x  (± 0.00) slower
     push and resort:      740.8 i/s - 691.11x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 107.101M ~~~~~~
== push N then pop N (N=15) =================================
Calculating -------------------------------------
     push and resort    174.559k (± 9.3%) i/s -      1.652M in   9.727219s
    bsearch + insert    232.816k (± 4.6%) i/s -      2.232M in   9.629871s
    ruby binary heap    120.546k (± 5.8%) i/s -      1.178M in   9.815854s
    quaternary DHeap    279.855k (± 5.7%) i/s -      2.638M in   9.514384s

Comparison:
    quaternary DHeap:   279855.1 i/s
    bsearch + insert:   232815.6 i/s - 1.20x  (± 0.00) slower
     push and resort:   174559.4 i/s - 1.60x  (± 0.00) slower
    ruby binary heap:   120546.3 i/s - 2.32x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 115.494M ~~~~~~
Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
== Push/pop 10000 with pre-filled queue (size=N) (N=15) =================================
Calculating -------------------------------------
     push and resort      0.665  (± 0.0%) i/s -      7.000  in  10.522800s
    bsearch + insert    115.104  (± 7.0%) i/s -      1.143k in  10.001464s
    ruby binary heap     59.472  (± 6.7%) i/s -    592.000  in  10.001862s
    quaternary DHeap    229.408  (± 3.9%) i/s -      2.290k in  10.003128s

Comparison:
    quaternary DHeap:      229.4 i/s
    bsearch + insert:      115.1 i/s - 1.99x  (± 0.00) slower
    ruby binary heap:       59.5 i/s - 3.86x  (± 0.00) slower
     push and resort:        0.7 i/s - 344.82x  (± 0.00) slower

########################################################################
# Benchmarks with N=31 (t=10sec/benchmark)
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 40.32M ~~~~~~
== push N (N=31) =================================
Calculating -------------------------------------
     push and resort    348.324  (±455.0%) i/s -    805.000  in  10.010970s
    bsearch + insert      3.770k (±184.2%) i/s -     13.821k in   9.996536s
    ruby binary heap    134.651k (±13.0%) i/s -      1.281M in   9.783765s
    quaternary DHeap    265.286k (±13.4%) i/s -      2.446M in   9.578544s

Comparison:
    quaternary DHeap:   265285.8 i/s
    ruby binary heap:   134650.6 i/s - 1.97x  (± 0.00) slower
    bsearch + insert:     3769.7 i/s - 70.37x  (± 0.00) slower
     push and resort:      348.3 i/s - 761.61x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 116.009M ~~~~~~
== push N then pop N (N=31) =================================
Calculating -------------------------------------
     push and resort     60.284k (±12.4%) i/s -    572.417k in   9.890867s
    bsearch + insert     97.594k (±11.9%) i/s -    921.368k in   9.823423s
    ruby binary heap     47.056k (± 6.5%) i/s -    461.656k in   9.900882s
    quaternary DHeap    117.835k (± 8.0%) i/s -      1.106M in   9.752863s

Comparison:
    quaternary DHeap:   117834.6 i/s
    bsearch + insert:    97593.8 i/s - same-ish: difference falls within error
     push and resort:    60284.3 i/s - 1.95x  (± 0.00) slower
    ruby binary heap:    47055.7 i/s - 2.50x  (± 0.00) slower

~~~~~~ refilling @dheap_bm_random_vals with 94.894M ~~~~~~
Pre-filling  push and resort priority queue ---------------------
Pre-filling bsearch + insert priority queue ---------------------
Pre-filling ruby binary heap priority queue ---------------------
Pre-filling quaternary DHeap priority queue ---------------------
~~~~~~ refilling @dheap_bm_random_vals with 0.0M ~~~~~~
== Push/pop 10000 with pre-filled queue (size=N) (N=31) =================================
Calculating -------------------------------------
     push and resort      0.660  (± 0.0%) i/s -      7.000  in  10.608272s
    bsearch + insert    116.291  (± 4.3%) i/s -      1.160k in  10.004286s
    ruby binary heap     60.142  (± 3.3%) i/s -    601.000  in  10.004740s
    quaternary DHeap    229.754  (± 5.2%) i/s -      2.288k in  10.000612s

Comparison:
    quaternary DHeap:      229.8 i/s
    bsearch + insert:      116.3 i/s - 1.98x  (± 0.00) slower
    ruby binary heap:       60.1 i/s - 3.82x  (± 0.00) slower
     push and resort:        0.7 i/s - 347.95x  (± 0.00) slower

########################################################################
# Benchmarks with N=100 (t=10sec/benchmark)
########################################################################

~~~~~~ refilling @dheap_bm_random_vals with 40.56M ~~~~~~
== push N (N=100) =================================
Calculating -------------------------------------
     push and resort    106.358  (±434.4%) i/s -    249.000  in  10.060781s
    bsearch + insert      1.122k (±181.6%) i/s -      4.319k in  10.002254s
    ruby binary heap     43.348k (± 8.1%) i/s -    425.614k in   9.927475s
    quaternary DHeap